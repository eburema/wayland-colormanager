<?xml version="1.0" encoding="UTF-8"?>
<protocol name="color_management_unstable_v1">

  <copyright>
    Copyright Â© 2019 Erwin Burema

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <interface name="zcm_manager_v1" version="1">
      <description summary="Manager to get information from compositor and attach buffer to CM">
          This interface is for the compositor to announce support for color managed surfaces.

          If this interface is supported by the compositor any surface that doesn't use this profile is to be assumed to be in sRGB irregardless of buffer size.

          Surface that do use this protocol can either be in a compositor supported color space in which case the compositor is responsible for rendering to the final display space in this first case there is no guarantee to accuracy since the compositor is allowed to use an intermediate compositing color space in this case. The second option is to render directly to a display color space using this protocol the query what that is, in this case accuracy will be guaranteed for the primary display, the compositor should make a best effort to also show mostly correct colors on any secondary displays the surface is visible off but no guarantee to accuracy shall be given.

          In the context of this protocol primary display means the main display the surface is visible on and secondary display means any display the surface is also visible on (either because the primary display is mirrored or the surface is split between two screens), it is the compositors task to determine what the primary display of a surface is - potentially with the help of user configuration - and sent the right events might this change.

          THIS INTERFACE IS EXPERIMENTAL!
      </description>

      <request name="destroy" type="destructor">
        <description summary="destroy the idle inhibitor object">
            Destroy the cm manager.
        </description>
      </request>

      <request name="cm_surface">
          <description summary="Make surface color managed">
              Make a surface color managed
          </description>
          <arg name="id" type="new_id" interface="zcm_surface_v1" />
          <arg name="surface" type="object" interface="wl_surface" />
      </request>

      <request name="supported_color_spaces">
          <description summary="Get supported color space from compositor">
              Clients can send this request to get a description of the standard color space supported by the compositor
          </description>
          <arg name="id" type="new_id" interface="zcm_color_space_config_v1" />
      </request>

      <request name="color_space_from_icc">
        <description summary="Create a color space from ICC profile">
        </description>
        <arg name="id" type="new_id" interface="zcm_color_space_v1"  summary="id for new color space"/>
        <arg name="profile" type="fd" summary="fd to icc profile" />
      </request>

      <request name="get_cm_output">
        <description summary="Turn a wl_output in a cm_output">
          Extends a wl_output with color mangement information
        </description>
        <arg name="id" type="new_id" interface="zcm_output_v1"  summary="id for new color space"/>
        <arg name="output" type="objet" interface="wl_output" summary="display tag" />
      </request>

  </interface>

  <interface name="zcm_output_v1" version="1">
    <description summary="Interface extending wl_output with CM info">
      This interface is intended to extend the wl_output with needed color management information

      If no hdr_on event gets sent assume HDR to be off
    </description>

    <event name="color_space">
      <description summary="color space of output">
        Will fire on creation and change of associated color profile
      </description>
      <arg name="cp" type="object" interface="zcm_color_space_v1" summary="color space object"/>
    </evemt>

    <event name="hdr_on">
      <description summary="Event fired in case HDR is on or gets turned on"/>
      <arg name="diffuse_white" type="uint" summary="Diffuse white in nits?" />
      <arg name="specular white" type="uint" summary="specular white in nits?"/>
    </event>

    <event name="hdr_off">
      <description summary="Event fired in case HDR gets turned off" />
    </event>
  </interface>


  <interface name="zcm_color_space_v1" version="1">
    <description summary="Interface to describe a color space">
        The color space interface used to query the capabilties of the color space
    </description>

    <request name="color_space_info">
        <description summary="Get supported color space from compositor">
            To get the color space info, comopsitor will reply with one of the below events
        </description>
    </request>

    <event name="color_space_icc">
      <description summary="Event for ICC color space">
        Event fired for color spaces described by ICC profile, mostly used for displays
      </description>
      <arg name="Profile" type="fd" summary="File descriptor to ICC profile" />
    </event>

  </interface>

  <interface name="zcm_color_space_config_v1" version="1">
    <description summary="Get supported color spaces from compositor">
      With this interface it is possible to request the standard suported color spaces from the compositor. When acquring this interface the compositor will fire off one event per supported color space and finish with a done event. In the event a color space changes (for example after a display has been profiled) it will fire off a new event.
    </description>

    <enum name="color_space">
      <description summary="One of the standard color spaces">
        This enum list the standard color spaces that a compositor can support do note a compositor is not guaranteed to support all of them
      </description>
      <entry name="sRGB" value="1" summary="sRGB color space" />
      <entry name="adobeRGB" value="2" summary="Adobe RGB" />
      <entry name="DCI-3P" value="3" summary="DCI-3P" />
      <entry name="rec2020" vallue="4" summary="rec2020" />
      <entry name="rec2020-pq" value="5" summary="rec2020 with pq curve (HDR)" />
      <entry name="rec2020-hlg" value="6" summary="rec2020 with HLG curve (HDR)" />
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the idle inhibitor object">
          Destroy the color space config object.
      </description>
    </request>

    <event name="done">
      <description summary="Finished iterating over color spaces">
        Fired when finished first time
      </description>
    </event>

    <event name="color_space">
      <description summary="Fired for every supported standard color space">
        For every supported standard color space (see enum in zcm_color_space_v1) one color_space event will be fired
      </description>
      <arg name="standard_id" type="uint" enum="color_space" summary="Which standard it is" />
      <arg name="cp_tag" type="object" interface="zcm_color_space_v1" summary="color space object"/>
    </event>

  </interface>

  <interface name="zcm_surface_v1" version="1">
      <description summary="Interface for color managed surface">
          With this interface the surface can set its color tags as defined in the JSON configuration. It can also use this to get the tag of the primary output.

          If a surface uses a tag that is the same as its primary output the surface must be blended as late as possible before output to display. Otherwise the compositor is allowed to use an intermediate compositing space.
      </description>

      <enum name="render_intent">
        <description summary="ICC render intent">
          ICC render intents
        </description>
        <entry name="absolute" value="1"/>
        <entry name="relative" value="2"/>
        <entry name="perceptual" value="3"/>
        <entry name="saturation" value="4" />
      </enum>

      <request name="set_color_space">
          <description summary="Set color space">
              Set the color space for the attache surface
          </description>
          <arg name="cp_tag" type="object" interface="zcm_color_space_v1" summary="Color space tag as defined in cm config" />
          <arg name="render_intent" type="uint" enum="render_intent" summary="ICC render intent" />
      </request>

      <request name="set_secondary_surface">
          <description summary="To assist the compositor in rendering to secondary screens">
              A secondary buffer can be set to assist a compositor when dealing with secondary screens or complex compositing tasks.

              This surface must be the same size as the primary surface, must not already be attached to a cm_surface object and cm_tag must not be a display tag.
          </description>
          <arg name="surface" type="object" interface="wl_surface" summary="Secondary surface" />
          <arg name="cp_tag" type="object" interface="zcm_color_space_v1" summary="Color space tag for secondart surface"/>
          <arg name="render_intent" type="uint" enum="render_intent" summary="ICC render intent" />
      </request>

      <request name="remove_secondary_surface">
        <description summary="Remove a secondary surface from color manager">
          Removes and added secondary surface
        </description>
      </request>

  </interface>

</protocol>
